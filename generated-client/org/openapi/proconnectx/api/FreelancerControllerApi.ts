// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    FreelancerFilter,
    FreelancerFilterFromJSON,
    FreelancerFilterToJSON,
    FreelancerFilterResponse,
    FreelancerFilterResponseFromJSON,
    FreelancerFilterResponseToJSON,
} from '../models';

export interface GetFilteredFreelancersRequest {
    freelancerFilter: FreelancerFilter;
}

export interface GetFreelancerProfileRequest {
    id: number;
}


/**
 */
function getFilteredFreelancersRaw<T>(requestParameters: GetFilteredFreelancersRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FreelancerFilterResponse>> = {}): QueryConfig<T> {
    if (requestParameters.freelancerFilter === null || requestParameters.freelancerFilter === undefined) {
        throw new runtime.RequiredError('freelancerFilter','Required parameter requestParameters.freelancerFilter was null or undefined when calling getFilteredFreelancers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/freelancer/filter`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FreelancerFilterToJSON(requestParameters.freelancerFilter),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FreelancerFilterResponseFromJSON), text);
    }

    return config;
}

/**
*/
export function getFilteredFreelancers<T>(requestParameters: GetFilteredFreelancersRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FreelancerFilterResponse>>): QueryConfig<T> {
    return getFilteredFreelancersRaw(requestParameters, requestConfig);
}

/**
 */
function getFreelancerProfileRaw<T>(requestParameters: GetFreelancerProfileRequest, requestConfig: runtime.TypedQueryConfig<T, object> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFreelancerProfile.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/freelancer/profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function getFreelancerProfile<T>(requestParameters: GetFreelancerProfileRequest, requestConfig?: runtime.TypedQueryConfig<T, object>): QueryConfig<T> {
    return getFreelancerProfileRaw(requestParameters, requestConfig);
}


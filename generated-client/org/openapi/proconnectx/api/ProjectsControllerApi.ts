// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectCreateDto,
    ProjectCreateDtoFromJSON,
    ProjectCreateDtoToJSON,
    ProjectFilter,
    ProjectFilterFromJSON,
    ProjectFilterToJSON,
    ProjectOwnerDto,
    ProjectOwnerDtoFromJSON,
    ProjectOwnerDtoToJSON,
    ProjectPublicDto,
    ProjectPublicDtoFromJSON,
    ProjectPublicDtoToJSON,
} from '../models';

export interface CreateProjectRequest {
    projectCreateDto: ProjectCreateDto;
}

export interface GetFilteredProjectsRequest {
    projectFilter: ProjectFilter;
}

export interface GetProjectRequest {
    projectId: number;
}


/**
 */
function createProjectRaw<T>(requestParameters: CreateProjectRequest, requestConfig: runtime.TypedQueryConfig<T, Project> = {}): QueryConfig<T> {
    if (requestParameters.projectCreateDto === null || requestParameters.projectCreateDto === undefined) {
        throw new runtime.RequiredError('projectCreateDto','Required parameter requestParameters.projectCreateDto was null or undefined when calling createProject.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/project`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ProjectCreateDtoToJSON(requestParameters.projectCreateDto),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProjectFromJSON(body), text);
    }

    return config;
}

/**
*/
export function createProject<T>(requestParameters: CreateProjectRequest, requestConfig?: runtime.TypedQueryConfig<T, Project>): QueryConfig<T> {
    return createProjectRaw(requestParameters, requestConfig);
}

/**
 */
function getFilteredProjectsRaw<T>(requestParameters: GetFilteredProjectsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ProjectPublicDto>> = {}): QueryConfig<T> {
    if (requestParameters.projectFilter === null || requestParameters.projectFilter === undefined) {
        throw new runtime.RequiredError('projectFilter','Required parameter requestParameters.projectFilter was null or undefined when calling getFilteredProjects.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/project/filter`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ProjectFilterToJSON(requestParameters.projectFilter),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ProjectPublicDtoFromJSON), text);
    }

    return config;
}

/**
*/
export function getFilteredProjects<T>(requestParameters: GetFilteredProjectsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ProjectPublicDto>>): QueryConfig<T> {
    return getFilteredProjectsRaw(requestParameters, requestConfig);
}

/**
 */
function getProjectRaw<T>(requestParameters: GetProjectRequest, requestConfig: runtime.TypedQueryConfig<T, ProjectOwnerDto> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProject.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/project/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProjectOwnerDtoFromJSON(body), text);
    }

    return config;
}

/**
*/
export function getProject<T>(requestParameters: GetProjectRequest, requestConfig?: runtime.TypedQueryConfig<T, ProjectOwnerDto>): QueryConfig<T> {
    return getProjectRaw(requestParameters, requestConfig);
}


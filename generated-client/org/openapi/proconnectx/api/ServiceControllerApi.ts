// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    ServiceCreateDto,
    ServiceCreateDtoFromJSON,
    ServiceCreateDtoToJSON,
    ServiceDao,
    ServiceDaoFromJSON,
    ServiceDaoToJSON,
    ServiceFilter,
    ServiceFilterFromJSON,
    ServiceFilterToJSON,
    ServiceFilterResponse,
    ServiceFilterResponseFromJSON,
    ServiceFilterResponseToJSON,
} from '../models';

export interface CreateServiceRequest {
    serviceCreateDto: ServiceCreateDto;
}

export interface GetFilteredServicesRequest {
    serviceFilter: ServiceFilter;
}

export interface GetServiceRequest {
    id: number;
}


/**
 */
function createServiceRaw<T>(requestParameters: CreateServiceRequest, requestConfig: runtime.TypedQueryConfig<T, ServiceDao> = {}): QueryConfig<T> {
    if (requestParameters.serviceCreateDto === null || requestParameters.serviceCreateDto === undefined) {
        throw new runtime.RequiredError('serviceCreateDto','Required parameter requestParameters.serviceCreateDto was null or undefined when calling createService.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/service`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ServiceCreateDtoToJSON(requestParameters.serviceCreateDto),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ServiceDaoFromJSON(body), text);
    }

    return config;
}

/**
*/
export function createService<T>(requestParameters: CreateServiceRequest, requestConfig?: runtime.TypedQueryConfig<T, ServiceDao>): QueryConfig<T> {
    return createServiceRaw(requestParameters, requestConfig);
}

/**
 */
function getFilteredServicesRaw<T>(requestParameters: GetFilteredServicesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ServiceFilterResponse>> = {}): QueryConfig<T> {
    if (requestParameters.serviceFilter === null || requestParameters.serviceFilter === undefined) {
        throw new runtime.RequiredError('serviceFilter','Required parameter requestParameters.serviceFilter was null or undefined when calling getFilteredServices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/service/filter`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ServiceFilterToJSON(requestParameters.serviceFilter),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ServiceFilterResponseFromJSON), text);
    }

    return config;
}

/**
*/
export function getFilteredServices<T>(requestParameters: GetFilteredServicesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ServiceFilterResponse>>): QueryConfig<T> {
    return getFilteredServicesRaw(requestParameters, requestConfig);
}

/**
 */
function getServiceRaw<T>(requestParameters: GetServiceRequest, requestConfig: runtime.TypedQueryConfig<T, ServiceDao> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getService.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/service/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ServiceDaoFromJSON(body), text);
    }

    return config;
}

/**
*/
export function getService<T>(requestParameters: GetServiceRequest, requestConfig?: runtime.TypedQueryConfig<T, ServiceDao>): QueryConfig<T> {
    return getServiceRaw(requestParameters, requestConfig);
}


// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    Bid,
    BidFromJSON,
    BidToJSON,
    BidCardDto,
    BidCardDtoFromJSON,
    BidCardDtoToJSON,
    BidRequest,
    BidRequestFromJSON,
    BidRequestToJSON,
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    FormResponse,
    FormResponseFromJSON,
    FormResponseToJSON,
} from '../models';

export interface ApproveBidRequest {
    projectId: number;
    bidId: number;
}

export interface DeclineBidRequest {
    projectId: number;
    bidId: number;
}

export interface GetFilteredBidsRequest {
    projectId: number;
    rating?: number;
    firstName?: string;
    lastName?: string;
    minPrice?: number;
    maxPrice?: number;
    statuses?: Array<GetFilteredBidsStatusesEnum>;
}

export interface MakeBidRequest {
    projectId: number;
    bidRequest: BidRequest;
}

export interface ReviewBidRequest {
    projectId: number;
    bidId: number;
}


/**
 */
function approveBidRaw<T>(requestParameters: ApproveBidRequest, requestConfig: runtime.TypedQueryConfig<T, Bid> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling approveBid.');
    }

    if (requestParameters.bidId === null || requestParameters.bidId === undefined) {
        throw new runtime.RequiredError('bidId','Required parameter requestParameters.bidId was null or undefined when calling approveBid.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/bid/approve/{projectId}/{bidId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters.bidId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BidFromJSON(body), text);
    }

    return config;
}

/**
*/
export function approveBid<T>(requestParameters: ApproveBidRequest, requestConfig?: runtime.TypedQueryConfig<T, Bid>): QueryConfig<T> {
    return approveBidRaw(requestParameters, requestConfig);
}

/**
 */
function declineBidRaw<T>(requestParameters: DeclineBidRequest, requestConfig: runtime.TypedQueryConfig<T, Bid> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling declineBid.');
    }

    if (requestParameters.bidId === null || requestParameters.bidId === undefined) {
        throw new runtime.RequiredError('bidId','Required parameter requestParameters.bidId was null or undefined when calling declineBid.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/bid/decline/{projectId}/{bidId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters.bidId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BidFromJSON(body), text);
    }

    return config;
}

/**
*/
export function declineBid<T>(requestParameters: DeclineBidRequest, requestConfig?: runtime.TypedQueryConfig<T, Bid>): QueryConfig<T> {
    return declineBidRaw(requestParameters, requestConfig);
}

/**
 */
function getFilteredBidsRaw<T>(requestParameters: GetFilteredBidsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<BidCardDto>> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFilteredBids.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.projectId !== undefined) {
        queryParameters['projectId'] = requestParameters.projectId;
    }


    if (requestParameters.rating !== undefined) {
        queryParameters['rating'] = requestParameters.rating;
    }


    if (requestParameters.firstName !== undefined) {
        queryParameters['firstName'] = requestParameters.firstName;
    }


    if (requestParameters.lastName !== undefined) {
        queryParameters['lastName'] = requestParameters.lastName;
    }


    if (requestParameters.minPrice !== undefined) {
        queryParameters['minPrice'] = requestParameters.minPrice;
    }


    if (requestParameters.maxPrice !== undefined) {
        queryParameters['maxPrice'] = requestParameters.maxPrice;
    }


    if (requestParameters.statuses) {
        queryParameters['statuses'] = requestParameters.statuses;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/bid/filter`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(BidCardDtoFromJSON), text);
    }

    return config;
}

/**
*/
export function getFilteredBids<T>(requestParameters: GetFilteredBidsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<BidCardDto>>): QueryConfig<T> {
    return getFilteredBidsRaw(requestParameters, requestConfig);
}

/**
 */
function makeBidRaw<T>(requestParameters: MakeBidRequest, requestConfig: runtime.TypedQueryConfig<T, FormResponse> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling makeBid.');
    }

    if (requestParameters.bidRequest === null || requestParameters.bidRequest === undefined) {
        throw new runtime.RequiredError('bidRequest','Required parameter requestParameters.bidRequest was null or undefined when calling makeBid.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/bid/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || BidRequestToJSON(requestParameters.bidRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormResponseFromJSON(body), text);
    }

    return config;
}

/**
*/
export function makeBid<T>(requestParameters: MakeBidRequest, requestConfig?: runtime.TypedQueryConfig<T, FormResponse>): QueryConfig<T> {
    return makeBidRaw(requestParameters, requestConfig);
}

/**
 */
function reviewBidRaw<T>(requestParameters: ReviewBidRequest, requestConfig: runtime.TypedQueryConfig<T, Bid> = {}): QueryConfig<T> {
    if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
        throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling reviewBid.');
    }

    if (requestParameters.bidId === null || requestParameters.bidId === undefined) {
        throw new runtime.RequiredError('bidId','Required parameter requestParameters.bidId was null or undefined when calling reviewBid.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/bid/review/{projectId}/{bidId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters.bidId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BidFromJSON(body), text);
    }

    return config;
}

/**
*/
export function reviewBid<T>(requestParameters: ReviewBidRequest, requestConfig?: runtime.TypedQueryConfig<T, Bid>): QueryConfig<T> {
    return reviewBidRaw(requestParameters, requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum GetFilteredBidsStatusesEnum {
    New = 'NEW',
    InReview = 'IN_REVIEW',
    Approved = 'APPROVED',
    Declined = 'DECLINED'
}

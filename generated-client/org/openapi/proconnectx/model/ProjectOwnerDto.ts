// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BidCardDto,
    BidCardDtoFromJSON,
    BidCardDtoToJSON,
    ClientMainInfo,
    ClientMainInfoFromJSON,
    ClientMainInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProjectOwnerDto
 */
export interface ProjectOwnerDto  {
    /**
     * 
     * @type {number}
     * @memberof ProjectOwnerDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    shortDescription?: string;
    /**
     * 
     * @type {ClientMainInfo}
     * @memberof ProjectOwnerDto
     */
    owner: ClientMainInfo;
    /**
     * 
     * @type {number}
     * @memberof ProjectOwnerDto
     */
    budget?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectOwnerDto
     */
    categories: Array<ProjectOwnerDtoCategoriesEnum>;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    status: ProjectOwnerDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectOwnerDto
     */
    projectType: ProjectOwnerDtoProjectTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ProjectOwnerDto
     */
    bidCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProjectOwnerDto
     */
    maxBid?: number;
    /**
     * 
     * @type {Date}
     * @memberof ProjectOwnerDto
     */
    dueDate?: Date;
    /**
     * 
     * @type {Array<BidCardDto>}
     * @memberof ProjectOwnerDto
     */
    bids: Array<BidCardDto>;
}

export function ProjectOwnerDtoFromJSON(json: any): ProjectOwnerDto {
    return {
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'owner': ClientMainInfoFromJSON(json['owner']),
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
        'categories': json['categories'],
        'status': json['status'],
        'location': json['location'],
        'projectType': json['projectType'],
        'bidCount': !exists(json, 'bidCount') ? undefined : json['bidCount'],
        'maxBid': !exists(json, 'maxBid') ? undefined : json['maxBid'],
        'dueDate': !exists(json, 'dueDate') ? undefined : new Date(json['dueDate']),
        'bids': (json['bids'] as Array<any>).map(BidCardDtoFromJSON),
    };
}

export function ProjectOwnerDtoToJSON(value?: ProjectOwnerDto): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'shortDescription': value.shortDescription,
        'owner': ClientMainInfoToJSON(value.owner),
        'budget': value.budget,
        'categories': value.categories,
        'status': value.status,
        'location': value.location,
        'projectType': value.projectType,
        'bidCount': value.bidCount,
        'maxBid': value.maxBid,
        'dueDate': value.dueDate === undefined ? undefined : value.dueDate.toISOString(),
        'bids': (value.bids as Array<any>).map(BidCardDtoToJSON),
    };
}

/**
* @export
* @enum {string}
*/
export enum ProjectOwnerDtoCategoriesEnum {
    WebDesign = 'WEB_DESIGN',
    WebDevelopment = 'WEB_DEVELOPMENT',
    MobileDevelopment = 'MOBILE_DEVELOPMENT',
    GraphicDesign = 'GRAPHIC_DESIGN',
    VideoEditing = 'VIDEO_EDITING',
    Writing = 'WRITING',
    Translation = 'TRANSLATION',
    Marketing = 'MARKETING',
    Sales = 'SALES',
    CustomerService = 'CUSTOMER_SERVICE',
    AdminSupport = 'ADMIN_SUPPORT',
    DataScience = 'DATA_SCIENCE',
    Engineering = 'ENGINEERING',
    Accounting = 'ACCOUNTING',
    Legal = 'LEGAL',
    Other = 'OTHER'
}
/**
* @export
* @enum {string}
*/
export enum ProjectOwnerDtoStatusEnum {
    Open = 'OPEN',
    InProgress = 'IN_PROGRESS',
    Closed = 'CLOSED'
}
/**
* @export
* @enum {string}
*/
export enum ProjectOwnerDtoProjectTypeEnum {
    Bid = 'BID',
    Fixed = 'FIXED'
}



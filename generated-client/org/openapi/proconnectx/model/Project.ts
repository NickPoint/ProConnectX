// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Bid,
    BidFromJSON,
    BidToJSON,
    Category,
    CategoryFromJSON,
    CategoryToJSON,
    Employer,
    EmployerFromJSON,
    EmployerToJSON,
} from './';

/**
 * 
 * @export
 * @interface Project
 */
export interface Project  {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    shortDescription?: string;
    /**
     * 
     * @type {Employer}
     * @memberof Project
     */
    employer?: Employer;
    /**
     * 
     * @type {object}
     * @memberof Project
     */
    freelancer?: object;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    budget?: number;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Project
     */
    categories?: Array<Category>;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    status?: ProjectStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    location?: string;
    /**
     * 
     * @type {Array<Bid>}
     * @memberof Project
     */
    bids?: Array<Bid>;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    projectType: ProjectProjectTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    minSatisfyingBid?: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    bidStep?: number;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    datePosted: Date;
    /**
     * 
     * @type {Date}
     * @memberof Project
     */
    dueDate?: Date;
}

export function ProjectFromJSON(json: any): Project {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': json['description'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'employer': !exists(json, 'employer') ? undefined : EmployerFromJSON(json['employer']),
        'freelancer': !exists(json, 'freelancer') ? undefined : json['freelancer'],
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
        'categories': !exists(json, 'categories') ? undefined : (json['categories'] as Array<any>).map(CategoryFromJSON),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'bids': !exists(json, 'bids') ? undefined : (json['bids'] as Array<any>).map(BidFromJSON),
        'projectType': json['projectType'],
        'minSatisfyingBid': !exists(json, 'minSatisfyingBid') ? undefined : json['minSatisfyingBid'],
        'bidStep': !exists(json, 'bidStep') ? undefined : json['bidStep'],
        'datePosted': new Date(json['datePosted']),
        'dueDate': !exists(json, 'dueDate') ? undefined : new Date(json['dueDate']),
    };
}

export function ProjectToJSON(value?: Project): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'shortDescription': value.shortDescription,
        'employer': EmployerToJSON(value.employer),
        'freelancer': value.freelancer,
        'budget': value.budget,
        'categories': value.categories === undefined ? undefined : (value.categories as Array<any>).map(CategoryToJSON),
        'status': value.status,
        'location': value.location,
        'bids': value.bids === undefined ? undefined : (value.bids as Array<any>).map(BidToJSON),
        'projectType': value.projectType,
        'minSatisfyingBid': value.minSatisfyingBid,
        'bidStep': value.bidStep,
        'datePosted': value.datePosted.toISOString(),
        'dueDate': value.dueDate === undefined ? undefined : value.dueDate.toISOString(),
    };
}

/**
* @export
* @enum {string}
*/
export enum ProjectStatusEnum {
    Open = 'OPEN',
    InProgress = 'IN_PROGRESS',
    Closed = 'CLOSED'
}
/**
* @export
* @enum {string}
*/
export enum ProjectProjectTypeEnum {
    Bid = 'BID',
    Fixed = 'FIXED'
}



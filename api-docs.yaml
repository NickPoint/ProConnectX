openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:3000/api
  description: Generated server url
paths:
  /bid/review/{projectId}/{bidId}:
    put:
      tags:
      - bid-controller
      operationId: reviewBid
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: bidId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Bid'
  /bid/decline/{projectId}/{bidId}:
    put:
      tags:
      - bid-controller
      operationId: declineBid
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: bidId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Bid'
  /bid/approve/{projectId}/{bidId}:
    put:
      tags:
      - bid-controller
      operationId: approveBid
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: bidId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Bid'
  /service:
    post:
      tags:
      - Service
      operationId: createService
      parameters:
      - name: service
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ServiceCreateDto'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FullServiceDto'
  /service/filter:
    post:
      tags:
      - Service
      operationId: getFilteredServices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceFilter'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightweightServiceDto'
  /project:
    post:
      tags:
      - Project
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Project'
  /project/filter:
    post:
      tags:
      - Project
      operationId: getFilteredProjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFilter'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectPublicDto'
  /orders/book/{serviceId}:
    post:
      tags:
      - order-controller
      operationId: bookService
      parameters:
      - name: serviceId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /freelancer:
    post:
      tags:
      - Freelancer
      operationId: createFreelancer
      parameters:
      - name: registrationRequest
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/FreelancerRegistrationRequest'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FreelancerDto'
  /freelancer/filter:
    post:
      tags:
      - Freelancer
      operationId: getFilteredFreelancers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerFilter'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerFilterResponse'
  /employer/register:
    post:
      tags:
      - employer-controller
      operationId: registerEmployer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployerRegistrationRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /bid/{projectId}:
    post:
      tags:
      - bid-controller
      operationId: makeBid
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormResponse'
  /auth/switch-role:
    post:
      tags:
      - Auth
      operationId: switchRole
      parameters:
      - name: role
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RoleType'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /auth/signup:
    post:
      tags:
      - Auth
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupFormRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/logout:
    post:
      tags:
      - Auth
      operationId: logoutUser
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /auth/login:
    post:
      tags:
      - Auth
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/check-email:
    post:
      tags:
      - Auth
      operationId: checkEmail
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
  /test/user:
    get:
      tags:
      - test-controller
      operationId: userAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/freelancer:
    get:
      tags:
      - test-controller
      operationId: moderatorAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/all:
    get:
      tags:
      - test-controller
      operationId: allAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/admin:
    get:
      tags:
      - test-controller
      operationId: adminAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /service/{id}:
    get:
      tags:
      - Service
      operationId: getService
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FullServiceDto'
  /project/{projectId}:
    get:
      tags:
      - Project
      operationId: getProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: Project owner info found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ProjectOwnerDto'
        "203":
          description: Project public info found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ProjectPublicDto'
  /orders/{orderId}:
    get:
      tags:
      - order-controller
      operationId: getOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/OrderDto'
  /freelancer/profile/{id}:
    get:
      tags:
      - Freelancer
      operationId: getFreelancerProfile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FreelancerDto'
  /employer:
    get:
      tags:
      - employer-controller
      operationId: getEmployer
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EmployerResponseDto'
  /bid/filter:
    get:
      tags:
      - bid-controller
      operationId: getFilteredBids
      parameters:
      - name: projectId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: rating
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: firstName
        in: query
        required: false
        schema:
          type: string
      - name: lastName
        in: query
        required: false
        schema:
          type: string
      - name: minPrice
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: maxPrice
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: statuses
        in: query
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/BidStatus'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BidDto'
  /auth:
    get:
      tags:
      - Auth
      operationId: getCurrentUser
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "409":
          description: Conflict
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FormValidationResponse'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
    FormValidationResponse:
      required:
      - errors
      - message
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
    AccountStatus:
      type: string
      enum:
      - UNVERIFIED
      - PENDING
      - ACTIVE
      - INACTIVE
      - DELETED
      - BANNED
    Address:
      required:
      - city
      - country
      - houseNumber
      - postalCode
      - region
      - street
      type: object
      properties:
        id:
          type: integer
          format: int64
        country:
          type: string
        city:
          type: string
        street:
          type: string
        postalCode:
          type: string
        houseNumber:
          type: string
        region:
          type: string
    Bid:
      required:
      - amount
      - coverLetter
      - freelancer
      - project
      - submittedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        project:
          $ref: '#/components/schemas/Project'
        freelancer:
          $ref: '#/components/schemas/Freelancer'
        amount:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/BidStatus'
        coverLetter:
          type: string
        submittedAt:
          type: string
          format: date-time
        estimatedCompletionDate:
          type: string
          format: date-time
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/File'
        milestones:
          type: object
          additionalProperties:
            type: object
    BidStatus:
      type: string
      enum:
      - NEW
      - IN_REVIEW
      - APPROVED
      - DECLINED
    Category:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/CategoryType'
    CategoryType:
      type: string
      enum:
      - WEB_DESIGN
      - WEB_DEVELOPMENT
      - MOBILE_DEVELOPMENT
      - GRAPHIC_DESIGN
      - VIDEO_EDITING
      - WRITING
      - TRANSLATION
      - MARKETING
      - SALES
      - CUSTOMER_SERVICE
      - ADMIN_SUPPORT
      - DATA_SCIENCE
      - ENGINEERING
      - ACCOUNTING
      - LEGAL
      - OTHER
    Client:
      required:
      - firstName
      - lastName
      - rating
      - ratingCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        principal:
          $ref: '#/components/schemas/Principal'
        address:
          $ref: '#/components/schemas/Address'
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
    DocumentType:
      type: string
      enum:
      - ID_CARD
      - PASSPORT
      - DRIVING_LICENSE
      - BUSINESS_LICENSE
      - COMPANY_REGISTRATION
      - BANK_STATEMENT
      - OTHER
      - GALLERY
      - AVATAR
    Employer:
      required:
      - accountStatus
      - address
      - companyName
      - description
      - email
      - phoneNumber
      - principal
      - rating
      - ratingCount
      - registrationCode
      - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/Address'
        companyName:
          type: string
        description:
          type: string
        registrationCode:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        avatarUrl:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        principal:
          $ref: '#/components/schemas/Principal'
        registrationDate:
          type: string
          format: date-time
        activationDate:
          type: string
          format: date-time
    File:
      required:
      - originalFileName
      - ownerId
      - ownerType
      - path
      - uploadAt
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
        ownerType:
          type: string
          enum:
          - SERVICE
          - PROJECT
          - CLIENT
          - FREELANCER
          - EMPLOYER
        documentType:
          $ref: '#/components/schemas/DocumentType'
        path:
          type: string
        originalFileName:
          type: string
        verified:
          type: boolean
        uploadAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
    Freelancer:
      required:
      - accountStatus
      - address
      - firstName
      - lastName
      - phoneNumber
      - principal
      - rating
      - ratingCount
      - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/Address'
        description:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        avatarUrl:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        principal:
          $ref: '#/components/schemas/Principal'
        registrationDate:
          type: string
          format: date-time
        activationDate:
          type: string
          format: date-time
    Principal:
      required:
      - email
      - password
      - roles
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Role'
        freelancer:
          $ref: '#/components/schemas/Freelancer'
        employer:
          $ref: '#/components/schemas/Employer'
        client:
          $ref: '#/components/schemas/Client'
    Project:
      required:
      - datePosted
      - description
      - projectType
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        employer:
          $ref: '#/components/schemas/Employer'
        freelancer:
          $ref: '#/components/schemas/Freelancer'
        budget:
          type: number
          format: double
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        location:
          type: string
        bids:
          type: array
          items:
            $ref: '#/components/schemas/Bid'
        projectType:
          $ref: '#/components/schemas/ProjectType'
        minSatisfyingBid:
          type: number
          format: double
        bidStep:
          type: number
          format: double
        datePosted:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
    ProjectStatus:
      type: string
      enum:
      - OPEN
      - IN_PROGRESS
      - CLOSED
    ProjectType:
      type: string
      enum:
      - BID
      - FIXED
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/RoleType'
    RoleType:
      type: string
      enum:
      - ROLE_EMPLOYER
      - ROLE_FREELANCER
      - ROLE_ADMIN
      - ROLE_UNVERIFIED
      - ROLE_CLIENT
    ServiceCreateDto:
      required:
      - categories
      - description
      - images
      - location
      - price
      - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        location:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        images:
          type: array
          items:
            type: string
            format: binary
        workflowJson:
          type: string
        faqsJson:
          type: string
    AddressDto:
      required:
      - city
      - country
      - houseNumber
      - postalCode
      - region
      - street
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
        houseNumber:
          type: string
    Faq:
      required:
      - answer
      - question
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
    FileResponseDto:
      required:
      - documentType
      - id
      - originalFileName
      - path
      - uploadDate
      - verified
      type: object
      properties:
        id:
          type: integer
          format: int64
        originalFileName:
          type: string
        documentType:
          $ref: '#/components/schemas/DocumentType'
        path:
          type: string
        uploadDate:
          type: string
          format: date-time
        verified:
          type: boolean
    FullServiceDto:
      required:
      - categories
      - description
      - freelancer
      - id
      - imagesMeta
      - postedAt
      - price
      - rating
      - ratingCount
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        freelancer:
          $ref: '#/components/schemas/LightWeightFreelancerDto'
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        workflow:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        faqs:
          type: array
          items:
            $ref: '#/components/schemas/Faq'
        address:
          $ref: '#/components/schemas/AddressDto'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        imagesMeta:
          type: array
          items:
            $ref: '#/components/schemas/FileResponseDto'
        postedAt:
          type: string
          format: date-time
    LightWeightFreelancerDto:
      required:
      - firstName
      - id
      - lastName
      - rating
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        avatarUrl:
          type: string
    ReviewDto:
      required:
      - createdAt
      - id
      - rating
      - reviewer
      type: object
      properties:
        id:
          type: integer
          format: int64
        reviewer:
          $ref: '#/components/schemas/ReviewerDto'
        body:
          type: string
        rating:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
    ReviewerDto:
      required:
      - firstName
      - id
      - rating
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        type:
          type: string
          enum:
          - Employer
          - Client
          - Freelancer
        avatarUrl:
          type: string
    WorkflowStep:
      required:
      - stepNumber
      - title
      type: object
      properties:
        stepNumber:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
    ServiceFilter:
      required:
      - categories
      - maxBudget
      - minBudget
      - rating
      type: object
      properties:
        title:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        location:
          type: string
        rating:
          type: number
          format: double
        minBudget:
          type: number
          format: double
        maxBudget:
          type: number
          format: double
    LightweightAddressDto:
      required:
      - city
      - country
      - postalCode
      type: object
      properties:
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    LightweightServiceDto:
      required:
      - categories
      - description
      - freelancer
      - id
      - postedAt
      - price
      - rating
      - ratingCount
      - thumbnailMeta
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        address:
          $ref: '#/components/schemas/LightweightAddressDto'
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        price:
          type: number
          format: double
        freelancer:
          $ref: '#/components/schemas/LightWeightFreelancerDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        postedAt:
          type: string
          format: date-time
        thumbnailMeta:
          $ref: '#/components/schemas/FileResponseDto'
    ProjectCreateDto:
      required:
      - categories
      - description
      - location
      - projectType
      - shortDescription
      - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        location:
          type: string
        projectType:
          $ref: '#/components/schemas/ProjectType'
        budget:
          type: integer
          format: int32
        minSatisfyingBid:
          type: number
          format: double
        bidStep:
          type: number
          format: double
    ProjectFilter:
      type: object
      properties:
        title:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        location:
          type: string
        minBudget:
          type: number
          format: double
        maxBudget:
          type: number
          format: double
        type:
          $ref: '#/components/schemas/ProjectType'
    EmployerResponseDto:
      required:
      - address
      - companyName
      - country
      - email
      - id
      - phoneNumber
      - registrationCode
      type: object
      properties:
        id:
          type: integer
          format: int64
        companyName:
          type: string
        registrationCode:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
        country:
          type: string
        description:
          type: string
    ProjectPublicDto:
      required:
      - categories
      - description
      - employer
      - id
      - location
      - projectType
      - status
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        employer:
          $ref: '#/components/schemas/EmployerResponseDto'
        budget:
          type: number
          format: double
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        location:
          type: string
        projectType:
          $ref: '#/components/schemas/ProjectType'
        bidCount:
          type: integer
          format: int32
        maxBid:
          type: number
          format: double
        dueDate:
          type: string
          format: date-time
    MessageResponse:
      required:
      - message
      type: object
      properties:
        message:
          type: string
        entityId:
          type: integer
          format: int64
    FreelancerRegistrationRequest:
      required:
      - address
      - categories
      - email
      - firstName
      - lastName
      - phoneNumber
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        avatarImage:
          type: string
          format: binary
        description:
          type: string
    BidDto:
      required:
      - amount
      - coverLetter
      - estimatedCompletionDate
      - freelancer
      - id
      - status
      - submittedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        freelancer:
          $ref: '#/components/schemas/LightWeightFreelancerDto'
        amount:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/BidStatus'
        coverLetter:
          type: string
        submittedAt:
          type: string
          format: date-time
        estimatedCompletionDate:
          type: string
          format: date-time
    ClientDto:
      required:
      - address
      - firstName
      - id
      - lastName
      - rating
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/AddressDto'
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
    EventDto:
      required:
      - createdAt
      - id
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        clientId:
          type: integer
          format: int64
        freelancerId:
          type: integer
          format: int64
        type:
          type: string
          enum:
          - ORDER_CREATED
          - ORDER_CANCELED
          - ORDER_COMPLETED
          - ORDER_PAID
          - ORDER_DISPUTED
          - ORDER_REVIEWED
          - ORDER_ACCEPTED
          - ORDER_DECLINED
          - ORDER_IN_PROGRESS
          - ORDER_DELIVERED
          - ORDER_REFUNDED
          - ORDER_MODIFIED
          - ORDER_RESOLVED
        createdAt:
          type: string
          format: date-time
    FreelancerDto:
      required:
      - address
      - firstName
      - id
      - lastName
      - rating
      - ratingCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/AddressDto'
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderDto'
    OrderDto:
      required:
      - createdAt
      - events
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        acceptedBid:
          $ref: '#/components/schemas/BidDto'
        service:
          $ref: '#/components/schemas/FullServiceDto'
        client:
          $ref: '#/components/schemas/ClientDto'
        status:
          type: string
          enum:
          - CREATED
          - IN_PROGRESS
          - COMPLETED
          - CANCELED
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventDto'
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
    FreelancerFilter:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        country:
          type: string
        city:
          type: string
        rating:
          type: number
          format: double
    FreelancerFilterResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        addressDto:
          $ref: '#/components/schemas/AddressDto'
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
    EmployerRegistrationRequest:
      required:
      - address
      - companyName
      - email
      - phoneNumber
      - registrationCode
      type: object
      properties:
        companyName:
          type: string
        registrationCode:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
        description:
          type: string
    BidRequest:
      required:
      - amount
      type: object
      properties:
        amount:
          type: number
          format: double
        coverLetter:
          type: string
        estimatedCompletionDate:
          type: string
          format: date-time
    FormResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
    SignupFormRequest:
      required:
      - email
      - password
      - role
      type: object
      properties:
        email:
          maxLength: 50
          minLength: 0
          type: string
        password:
          maxLength: 32
          minLength: 8
          type: string
        role:
          $ref: '#/components/schemas/RoleType'
    AuthResponse:
      required:
      - activeRoleType
      - roles
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoleType'
        activeRoleType:
          $ref: '#/components/schemas/RoleType'
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    ProjectOwnerDto:
      required:
      - bids
      - categories
      - description
      - employer
      - id
      - location
      - projectType
      - status
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        employer:
          $ref: '#/components/schemas/EmployerResponseDto'
        budget:
          type: number
          format: double
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        location:
          type: string
        projectType:
          $ref: '#/components/schemas/ProjectType'
        bidCount:
          type: integer
          format: int32
        maxBid:
          type: number
          format: double
        dueDate:
          type: string
          format: date-time
        bids:
          type: array
          items:
            $ref: '#/components/schemas/BidDto'

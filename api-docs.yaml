openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /orders/{orderId}/submit-for-review:
    put:
      tags:
      - Order
      operationId: submitOrderForReview
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /orders/{orderId}/dispute:
    put:
      tags:
      - Order
      operationId: disputeOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /orders/{orderId}/cancel:
    put:
      tags:
      - Order
      operationId: cancelOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /orders/{orderId}/approve:
    put:
      tags:
      - Order
      operationId: approveOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /orders/{orderId}/accept:
    put:
      tags:
      - Order
      operationId: acceptOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: deadlineDate
        in: query
        required: true
        schema:
          type: string
          format: date
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /freelancer/profile:
    put:
      tags:
      - Freelancer
      operationId: updateFreelancer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /dispute/{disputeId}/reject-proposal:
    put:
      tags:
      - Dispute
      operationId: rejectProposal
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /dispute/{disputeId}/propose:
    put:
      tags:
      - Dispute
      operationId: proposeSolution
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /dispute/{disputeId}/force-release:
    put:
      tags:
      - Dispute
      operationId: forceRelease
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /dispute/{disputeId}/force-refund:
    put:
      tags:
      - Dispute
      operationId: forceRefund
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /dispute/{disputeId}/accept-proposal:
    put:
      tags:
      - Dispute
      operationId: acceptProposal
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /client/profile:
    put:
      tags:
      - Client
      operationId: updateClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateDto'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /admin/registration/{type}/{id}/reject:
    put:
      tags:
      - Registration
      operationId: rejectRegistrationRequest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /admin/registration/{type}/{id}/approve:
    put:
      tags:
      - Registration
      operationId: approveRegistrationRequest
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /service:
    get:
      tags:
      - Service
      operationId: getServices
      parameters:
      - name: title
        in: query
        required: false
        schema:
          type: string
      - name: categories
        in: query
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
      - name: location
        in: query
        required: false
        schema:
          type: string
      - name: rating
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: minBudget
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: maxBudget
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PageLightweightServiceDto'
    post:
      tags:
      - Service
      operationId: createService
      parameters:
      - name: service
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ServiceCreateDto'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                type: integer
                format: int64
  /orders/book/{serviceId}:
    post:
      tags:
      - Order
      summary: Book a service
      operationId: bookService
      parameters:
      - name: serviceId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookServiceDto'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: integer
                format: int64
  /freelancer:
    get:
      tags:
      - Freelancer
      operationId: getFreelancer
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FreelancerDto'
    post:
      tags:
      - Freelancer
      operationId: createFreelancer
      parameters:
      - name: registrationRequest
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/FreelancerRegistrationRequest'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/FreelancerDto'
  /files/avatar:
    post:
      tags:
      - File
      operationId: updateAvatar
      requestBody:
        content:
          application/json:
            schema:
              required:
              - avatar
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /client:
    get:
      tags:
      - Client
      operationId: getClient
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ClientDto'
    post:
      tags:
      - Client
      operationId: createClient
      parameters:
      - name: registrationRequest
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ClientRegistrationRequest'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ClientDto'
  /auth/switch-role:
    post:
      tags:
      - Auth
      operationId: switchRole
      parameters:
      - name: role
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/RoleType'
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /auth/signup:
    post:
      tags:
      - Auth
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupFormRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/logout:
    post:
      tags:
      - Auth
      operationId: logoutUser
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /auth/login:
    post:
      tags:
      - Auth
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/check-email:
    post:
      tags:
      - Auth
      operationId: checkEmail
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
  /auth/add-account:
    post:
      tags:
      - Auth
      operationId: addAccount
      parameters:
      - name: accountType
        in: query
        required: true
        schema:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /test/user:
    get:
      tags:
      - test-controller
      operationId: userAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/freelancer:
    get:
      tags:
      - test-controller
      operationId: moderatorAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/all:
    get:
      tags:
      - test-controller
      operationId: allAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /test/admin:
    get:
      tags:
      - test-controller
      operationId: adminAccess
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
  /statistics/overview:
    get:
      tags:
      - Statistics
      operationId: getStatsOverview
      parameters:
      - name: start
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: end
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: zoneId
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StatisticsDto'
  /service/{id}:
    get:
      tags:
      - Service
      operationId: getService
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
  /service/user-services:
    get:
      tags:
      - Service
      operationId: getUserServices
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PageLightweightServiceDto'
  /orders:
    get:
      tags:
      - Order
      operationId: getOrders
      parameters:
      - name: statuses
        in: query
        required: false
        schema:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PageOrderDto'
  /orders/{orderId}:
    get:
      tags:
      - Order
      operationId: getOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/OrderDto'
  /files/{fileId}:
    get:
      tags:
      - File
      operationId: getFile
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: string
                format: binary
  /dispute/{disputeId}:
    get:
      tags:
      - Dispute
      operationId: getDispute
      parameters:
      - name: disputeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/DisputeDto'
  /auth:
    get:
      tags:
      - Auth
      operationId: getCurrentUser
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /auth/freelancer-registrations:
    get:
      tags:
      - Auth
      operationId: getFreelancerRegistrationRequests
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightweightRegistrationRequestDto'
  /auth/client-registrations:
    get:
      tags:
      - Auth
      operationId: getClientRegistrationRequests
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LightweightRegistrationRequestDto'
  /admin/freelancer-registrations:
    get:
      tags:
      - Registration
      operationId: getFreelancersRegistrationRequests
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationRequestDto'
  /admin/client-registrations:
    get:
      tags:
      - Registration
      operationId: getClientsRegistrationRequests
      responses:
        "404":
          description: Not Found
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                oneOf:
                - type: string
                - $ref: '#/components/schemas/ErrorMessage'
        "401":
          description: Unauthorized
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "403":
          description: Forbidden
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationRequestDto'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
    AddressDto:
      required:
      - city
      - country
      - houseNumber
      - postalCode
      - region
      - street
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
        houseNumber:
          type: string
    UserProfileUpdateDto:
      required:
      - address
      - firstName
      - lastName
      - phoneNumber
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
    CategoryType:
      type: string
      enum:
      - WEB_DESIGN
      - WEB_DEVELOPMENT
      - FRONTEND_DEVELOPMENT
      - BACKEND_DEVELOPMENT
      - MOBILE_APP_DEVELOPMENT
      - GAME_DEVELOPMENT
      - WORDPRESS_DEVELOPMENT
      - ECOMMERCE_DEVELOPMENT
      - SOFTWARE_DEVELOPMENT
      - API_DEVELOPMENT
      - GRAPHIC_DESIGN
      - UI_UX_DESIGN
      - LOGO_DESIGN
      - BRAND_IDENTITY_DESIGN
      - VIDEO_EDITING
      - ANIMATION
      - ILLISTRATION
      - THREE_D_MODELING
      - PRESENTATION_DESIGN
      - INTERIOR_DESIGN
      - CONTENT_WRITING
      - COPYWRITING
      - GHOSTWRITING
      - TECHNICAL_WRITING
      - RESUME_WRITING
      - GRANT_WRITING
      - CREATIVE_WRITING
      - SEO_WRITING
      - SCRIPTWRITING
      - EDITING_PROOFREADING
      - TRANSLATION
      - TRANSCRIPTION
      - LANGUAGE_TUTORING
      - SUBTITLING_CAPTIONING
      - LOCALIZATION_SERVICES
      - DIGITAL_MARKETING
      - SOCIAL_MEDIA_MARKETING
      - SEO_SEM
      - EMAIL_MARKETING
      - AFFILIATE_MARKETING
      - INFLUENCER_MARKETING
      - LEAD_GENERATION
      - TELEMARKETING
      - BRAND_STRATEGY
      - CUSTOMER_SUPPORT
      - TECHNICAL_SUPPORT
      - VIRTUAL_ASSISTANT
      - CHAT_SUPPORT
      - HELPDESK_SERVICES
      - DATA_ENTRY
      - WEB_RESEARCH
      - PROJECT_MANAGEMENT
      - CALENDAR_MANAGEMENT
      - DOCUMENT_PREPARATION
      - DATA_ANALYSIS
      - DATA_ENGINEERING
      - MACHINE_LEARNING
      - AI_DEVELOPMENT
      - BUSINESS_INTELLIGENCE
      - DATA_VISUALIZATION
      - BIG_DATA_SERVICES
      - CIVIL_ENGINEERING
      - MECHANICAL_ENGINEERING
      - ELECTRICAL_ENGINEERING
      - STRUCTURAL_ENGINEERING
      - CAD_DRAFTING
      - ARCHITECTURE_DESIGN
      - PRODUCT_DESIGN
      - ACCOUNTING
      - BOOKKEEPING
      - FINANCIAL_ANALYSIS
      - BUSINESS_CONSULTING
      - TAX_PREPARATION
      - HR_CONSULTING
      - FINANCIAL_MODELING
      - LEGAL_CONSULTING
      - CONTRACT_DRAFTING
      - INTELLECTUAL_PROPERTY
      - CORPORATE_LAW
      - FAMILY_LAW_SERVICES
      - COACHING_MENTORING
      - FITNESS_TRAINING
      - MUSIC_PRODUCTION
      - PODCAST_EDITING
      - CAREER_COUNSELING
      - EVENT_PLANNING
      - LIFE_COACHING
      - PLUMBING_SERVICES
      - ELECTRICAL_REPAIR
      - CARPENTRY_SERVICES
      - AUTO_REPAIR
      - HOUSE_CLEANING
      - MOVING_HELP
      - GARDENING_LANDSCAPING
      - CONSTRUCTION_WORK
      - PEST_CONTROL
      - LOCKSMITH_SERVICES
      - PAINTING_SERVICES
      - HVAC_REPAIR
      - APPLIANCE_REPAIR
      - FURNITURE_ASSEMBLY
      - PET_SITTING
      - DOG_WALKING
      - BABYSITTING
      - ELDERLY_CARE
      - SECURITY_SERVICES
      - WINDOW_CLEANING
      - WASTE_REMOVAL
      - RECYCLING_SERVICES
      - CAR_WASHING
      - CAR_SCRAPING
      - BIKE_REPAIR
      - FLOORING_INSTALLATION
      - ROOFING_SERVICES
      - WATER_DAMAGE_RESTORATION
      - POOL_CLEANING
      - SNOW_REMOVAL
      - EVENT_STAFFING
      - CATERING_SERVICES
      - PHOTOGRAPHY_SERVICES
      - MAKEUP_ARTIST
      - TATTOO_ARTIST
      - OTHER
    ServiceAddressDto:
      required:
      - city
      - country
      - region
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
        houseNumber:
          type: string
    ServiceCreateDto:
      required:
      - categories
      - description
      - images
      - price
      - shortDescription
      - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        price:
          type: number
        address:
          $ref: '#/components/schemas/ServiceAddressDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        images:
          type: array
          items:
            type: string
            format: binary
        workflowJson:
          type: string
        faqsJson:
          type: string
    BookServiceDto:
      type: object
      properties:
        additionalNotes:
          type: string
        files:
          type: array
          description: List of files to upload
          format: binary
          items:
            type: string
            format: binary
    FreelancerRegistrationRequest:
      required:
      - address
      - categories
      - description
      - firstName
      - idDocument
      - lastName
      - phoneNumber
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        avatarImage:
          type: string
          format: binary
        description:
          type: string
        idDocument:
          type: array
          items:
            type: string
            format: binary
    FreelancerDto:
      required:
      - address
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - rating
      - ratingCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/AddressDto'
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        avatarImageUrl:
          type: string
    ClientRegistrationRequest:
      required:
      - address
      - firstName
      - idDocument
      - lastName
      - phoneNumber
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address:
          $ref: '#/components/schemas/AddressDto'
        phoneNumber:
          type: string
        avatarImage:
          type: string
          format: binary
        idDocument:
          type: array
          items:
            type: string
            format: binary
    ClientDto:
      required:
      - address
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - rating
      - ratingCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/AddressDto'
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        avatarImageUrl:
          type: string
    RoleType:
      type: string
      enum:
      - ROLE_EMPLOYER
      - ROLE_FREELANCER
      - ROLE_ADMIN
      - ROLE_UNVERIFIED
      - ROLE_CLIENT
    SignupFormRequest:
      required:
      - accountType
      - email
      - password
      type: object
      properties:
        email:
          maxLength: 50
          minLength: 0
          type: string
        password:
          maxLength: 32
          minLength: 8
          type: string
        accountType:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
    Account:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        accountType:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
    AccountStatus:
      type: string
      enum:
      - UNVERIFIED
      - PENDING
      - ACTIVE
      - INACTIVE
      - DELETED
      - BANNED
      - REJECTED
    AuthResponse:
      required:
      - accounts
      - activeRole
      - email
      - roles
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        roles:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoleType'
        activeRole:
          $ref: '#/components/schemas/RoleType'
        avatarImageUrl:
          type: string
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    StatisticsDto:
      required:
      - value
      type: object
      properties:
        value:
          type: number
        trend:
          type: string
        percentGrow:
          type: number
        data:
          type: array
          items:
            type: number
    LightWeightFreelancerDto:
      required:
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - rating
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        email:
          type: string
        phoneNumber:
          type: string
        avatarImageUrl:
          type: string
    LightweightAddressDto:
      required:
      - city
      - country
      - postalCode
      type: object
      properties:
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    LightweightServiceDto:
      required:
      - categories
      - freelancer
      - id
      - postedAt
      - price
      - rating
      - ratingCount
      - shortDescription
      - thumbnailUrl
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        shortDescription:
          type: string
        address:
          $ref: '#/components/schemas/LightweightAddressDto'
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        price:
          type: number
        freelancer:
          $ref: '#/components/schemas/LightWeightFreelancerDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        postedAt:
          type: string
          format: date-time
        thumbnailUrl:
          type: string
    PageLightweightServiceDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/LightweightServiceDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    Faq:
      required:
      - answer
      - question
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
    ReviewDto:
      required:
      - createdAt
      - id
      - rating
      - reviewer
      type: object
      properties:
        id:
          type: integer
          format: int64
        reviewer:
          $ref: '#/components/schemas/ReviewerDto'
        body:
          type: string
        rating:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
    ReviewerDto:
      required:
      - firstName
      - id
      - rating
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        type:
          type: string
          enum:
          - Employer
          - Client
          - Freelancer
        avatarImageUrl:
          type: string
    ServiceDto:
      required:
      - categories
      - description
      - freelancer
      - galleryUrls
      - id
      - postedAt
      - price
      - rating
      - ratingCount
      - shortDescription
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        freelancer:
          $ref: '#/components/schemas/LightWeightFreelancerDto'
        title:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        price:
          type: number
        workflow:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        faqs:
          type: array
          items:
            $ref: '#/components/schemas/Faq'
        address:
          $ref: '#/components/schemas/ServiceAddressDto'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryType'
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        galleryUrls:
          type: array
          items:
            type: string
        postedAt:
          type: string
          format: date-time
    WorkflowStep:
      required:
      - stepNumber
      - title
      type: object
      properties:
        stepNumber:
          type: integer
          format: int32
        title:
          type: string
        description:
          type: string
    OrderStatus:
      type: string
      enum:
      - CREATED
      - IN_PROGRESS
      - SUBMITTED_FOR_REVIEW
      - APPROVED
      - COMPLETED
      - DISPUTED
      - CANCELED
    EventDto:
      required:
      - createdAt
      - id
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/EventType'
        createdAt:
          type: string
          format: date-time
        disputeId:
          type: integer
          format: int64
    EventType:
      type: string
      enum:
      - ACCOUNT_CREATED
      - VERIFICATION_SUBMITTED
      - ACCOUNT_APPROVED
      - ACCOUNT_REJECTED
      - ORDER_CREATED
      - ORDER_ACCEPTED
      - ORDER_REJECTED
      - ORDER_SUBMITTED_FOR_REVIEW
      - ORDER_APPROVED
      - ORDER_COMPLETED
      - ORDER_APPROVED_BY_ADMIN
      - ORDER_DISPUTED
      - ORDER_CANCELED
      - ORDER_CANCELED_WITH_REFUND_BY_ADMIN
      - DISPUTE_CREATED
      - DISPUTE_RESOLVED
      - DISPUTE_REJECTED
      - PROPOSAL_CREATED
      - PROPOSAL_ACCEPTED
      - PROPOSAL_REJECTED
      - TRANSACTION_CREATED
      - TRANSACTION_ESCROWED
      - TRANSACTION_RELEASED
      - REVIEW_SUBMITTED
      - FILE_UPLOADED
      - ROLE_SWITCHED
    FileDto:
      required:
      - id
      - originalFileName
      - uploadedAt
      type: object
      properties:
        id:
          type: integer
          format: int64
        originalFileName:
          type: string
        uploadedAt:
          type: string
          format: date-time
    LightweightClientDto:
      required:
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - rating
      - ratingCount
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        email:
          type: string
        phoneNumber:
          type: string
        avatarImageUrl:
          type: string
    LightweightTransactionDto:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/TransactionStatus'
    OrderDto:
      required:
      - client
      - createdAt
      - events
      - id
      - service
      - status
      - transaction
      type: object
      properties:
        id:
          type: integer
          format: int64
        service:
          $ref: '#/components/schemas/LightweightServiceDto'
        client:
          $ref: '#/components/schemas/LightweightClientDto'
        status:
          $ref: '#/components/schemas/OrderStatus'
        transaction:
          $ref: '#/components/schemas/LightweightTransactionDto'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventDto'
        additionalNotes:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileDto'
        rejectionReason:
          type: string
        createdAt:
          type: string
          format: date-time
        deadlineDate:
          type: string
          format: date
        updatedAt:
          type: string
          format: date-time
    PageOrderDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    TransactionStatus:
      type: string
      enum:
      - PENDING
      - ESCROWED
      - RELEASED
      - CANCELED
      - REFUNDED
      - DISPUTED
    DisputeDto:
      required:
      - id
      - reason
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/DisputeStatus'
        reason:
          type: string
        proposalStatus:
          type: string
          enum:
          - NONE
          - PENDING
          - ACCEPTED
          - REJECTED
        proposal:
          type: string
        proposalRejectionReason:
          type: string
    DisputeStatus:
      type: string
      enum:
      - OPEN
      - IN_REVIEW
      - RESOLVED_REFUNDED
      - RESOLVED_FREELANCER_PAID
      - REJECTED
    LightweightRegistrationRequestDto:
      required:
      - accountStatus
      - accountType
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        rejectionReason:
          type: string
        registrationDate:
          type: string
          format: date-time
        accountType:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
    RegistrationRequestDto:
      required:
      - accountStatus
      - accountType
      - email
      - firstName
      - id
      - lastName
      - phoneNumber
      - registrationDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        avatarImageUrl:
          type: string
        phoneNumber:
          type: string
        accountStatus:
          $ref: '#/components/schemas/AccountStatus'
        rejectionReason:
          type: string
        registrationDate:
          type: string
          format: date-time
        accountType:
          type: string
          enum:
          - ADMIN
          - CLIENT
          - FREELANCER
